{
  "name": "Flask-djcelery",
  "tagline": "An example project for configuring Djcelery with Flask application and dynamically changing tasks via REST API and through django admin",
  "body": "# flask-djcelery\r\nAn example project for configuring Djcelery with Flask application and dynamically adding tasks\r\n - REST API\r\n - Django admin\r\n\r\n\r\nQuick Setup\r\n-----------\r\n\r\n#### Django Admin\r\n\r\n1. Clone this repository.\r\n2. Create a virtualenv and install the requirements.\r\n3. Create database using command: `PYTHONPATH=. django-admin.py migrate --settings=celeryconfig`\r\n4. Start the django server using command: `PYTHONPATH=. django-admin.py runserver --settings=celeryconfig`\r\n5. Open second terminal window and start local Redis server using command: `./run-redis.sh`.\r\n6. Start celery worker in another terminal window: `env/bin/celery worker -A app.celery --loglevel=INFO`.\r\n6. Start celery beat in another terminal window: `PYTHONPATH=. django-admin.py celerybeat --settings=celeryconfig`.\r\n7. Django Admin can be checked by visiting `http://localhost:8000/` and celery tasks can be added/removed\r\n8. Flask application can be started as: `python app.py`\r\n\r\n\r\n#### REST API\r\n\r\n1. Follow all the above steps\r\n2. `GET /interval_schedules/` will list all the schedule intervals\r\n3. `POST /interval_schedules/` will add a schedule interval\r\n    \r\n    ##### POST Data (Example)\r\n    - every: 90\r\n    - period: seconds\r\n4. `GET /periodic_tasks/` will list all the periodic tasks\r\n5. `POST /periodic_tasks/` will add a new task \r\n    \r\n    ##### POST Data (Example)\r\n    - name: 'API Task'\r\n    - task: 'app.add'\r\n    - enabled: True\r\n    - args: '[5,5]'\r\n    - interval: 1 (would need to be created first using API)\r\n6. Similarly `PUT /interval_schedules/1/` will change the interval for tasks on the run\r\n    - every: 100\r\n    - period: seconds\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}